services:
    _defaults:
        autowire: true
        autoconfigure: true

    App\:
        resource: '../src/'
        exclude:
            - '../src/Kernel.php'
            - '../src/Domain/*'
            - '../src/Infrastructure/Persistence/Doctrine/Type/*'

    Symfony\Bridge\Monolog\Processor\TokenProcessor:
        tags:
            - { name: monolog.processor, handler: main }

    Symfony\Bridge\Monolog\Processor\RouteProcessor:
        tags:
            - { name: monolog.processor, handler: main }

    App\Infrastructure\Logging\Processor\TraceIdProcessor:
        tags:
            - { name: monolog.processor, handler: main }

    App\Application\HealthCheck\Business\Checker\Checker:
        arguments:
            $checkers:
                - '@App\Application\HealthCheck\Communication\Plugins\DoctrineConnectionCheckerPlugin'

    App\Infrastructure\Container\Container:
        arguments:
            - '@service_container'

    App\Presentation\ExceptionListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    App\Domain\Repository\StoreRepositoryInterface: '@App\Infrastructure\Persistence\Doctrine\Repository\StoreRepository'
    App\Domain\Repository\GatewayRepositoryInterface: '@App\Infrastructure\Persistence\Doctrine\Repository\GatewayRepository'
    App\Domain\Repository\UserRepositoryInterface: '@App\Infrastructure\Persistence\Doctrine\Repository\UserRepository'
    App\Domain\Repository\PaymentRepositoryInterface: '@App\Infrastructure\Persistence\Doctrine\Repository\PaymentRepository'

    App\Application\Security\Provider\UserProvider:
        arguments:
            $repository: '@App\Infrastructure\Persistence\Doctrine\Repository\UserRepository'

    fms.marker:
        class: App\Application\Payment\Business\StateMachine\Marker

    app.serializer:
        factory: [null, 'create']
        class: App\Infrastructure\Serializer\Serializer

    App\Infrastructure\Serializer\SerializerInterface: '@app.serializer'

    guzzle.handlers:
        class: GuzzleHttp\Handler\MockHandler
        arguments:
            $queue: [
                '@App\Infrastructure\Test\Guzzle\Mock\TokenResponseMock',
                '@App\Infrastructure\Test\Guzzle\Mock\RegisterPaymentResponseMock'
            ]

    GuzzleHttp\Client:
        arguments:
            - {
                    base_uri: https://google.com/,
                    timeout: 30,
                    handler: '@guzzle.handlers'
              }

    App\Infrastructure\HTTP\HttpClient:
        arguments: ['@GuzzleHttp\Client', '@app.serializer']

    App\Application\Payment\Business\PaymentProcessor\Step\Start:
        calls:
            - setNext: ['@App\Application\Payment\Business\PaymentProcessor\Step\Tokenize']

    App\Application\Payment\Business\PaymentProcessor\Step\Tokenize:
        calls:
            - setNext: ['@App\Application\Payment\Business\PaymentProcessor\Step\CreateTransaction']

    App\Application\Payment\Business\PaymentProcessor\Step\CreateTransaction:
        calls:
            - setNext: ['@App\Application\Payment\Business\PaymentProcessor\Step\CheckPaymentStatus']
